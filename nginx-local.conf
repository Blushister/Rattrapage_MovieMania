events {
    worker_connections 1024;
}

http {
    # Upstream vers les services Docker
    upstream frontend {
        server nextjs_frontend:3000;
    }
    
    upstream users_api {
        server users_api:8888;
    }
    
    upstream recos_api {
        server rec_api:8000;
    }
    
    # Serveur HTTPS principal
    server {
        listen 8443 ssl http2;
        server_name localhost;
        
        ssl_certificate /etc/ssl/certs/cert.pem;
        ssl_certificate_key /etc/ssl/private/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        
        # Frontend (racine)
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host:$server_port;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Host $host:$server_port;
            proxy_set_header X-Forwarded-Port $server_port;
        }
        
        # API Users
        location /api/users/ {
            proxy_pass http://users_api/api/v1/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
        }
        
        # API Recos
        location /api/recos/ {
            proxy_pass http://recos_api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
        }
    }
    
    # Redirection HTTP vers HTTPS
    server {
        listen 8080;
        server_name localhost;
        return 301 https://$server_name:8443$request_uri;
    }
}
